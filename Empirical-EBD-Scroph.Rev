################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   episodic birth-death model with uniform taxon sampling
# 
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Read in the "observed" tree
T <- readTrees("data/MCC_Scroph_treePL_Bontia_UCLN_Empirical.20220929.tre")[1]

# Get some useful variables from the data. We need these later on.
taxa <- T.taxa()

# set my move index
mvi = 0
mni = 0

NUM_INTERVALS = 10



####################
# Create the rates #
####################

# first we create the standard deviation of the rates between intervals
# draw the sd from an exponential distribution
speciation_sd ~ dnExponential(1.0)
moves[++mvi] = mvScale(speciation_sd,weight=5.0)

extinction_sd ~ dnExponential(1.0)
moves[++mvi] = mvScale(extinction_sd,weight=5.0)


# create a random variable at the present time
# Modify the default in Turorial to make it more biologically realistic, between 0.004 and 0.0 for speciation at present time, and 0.0004 and 0.1 for extinction at present time 
log_speciation[1] ~ dnUniform(-4.0,0.0)
log_extinction[1] ~ dnUniform(-4.0,-1.0)


# apply moves on the rates
moves[++mvi] = mvSlide(log_speciation[1], weight=2)
moves[++mvi] = mvSlide(log_extinction[1], weight=2)


speciation[1] := exp( log_speciation[1] )
extinction[1] := exp( log_extinction[1] )


for (i in 1:NUM_INTERVALS) {
    index = i+1
    
    # specify normal priors (= Brownian motion) on the log of the rates
    log_speciation[index] ~ dnNormal( mean=log_speciation[i], sd=speciation_sd )
    log_extinction[index] ~ dnNormal( mean=log_extinction[i], sd=extinction_sd )

    # apply moves on the rates
    moves[++mvi] = mvSlide(log_speciation[index], weight=2)
    moves[++mvi] = mvSlide(log_extinction[index], weight=2)

    # transform the log-rate into actual rates
    speciation[index] := exp( log_speciation[index] )
    extinction[index] := exp( log_extinction[index] )

}

moves[++mvi] = mvVectorSlide(log_speciation, weight=10)
moves[++mvi] = mvVectorSlide(log_extinction, weight=10)

moves[++mvi] = mvShrinkExpand( log_speciation, sd=speciation_sd, weight=10 )
moves[++mvi] = mvShrinkExpand( log_extinction, sd=extinction_sd, weight=10 )


interval_times <- T.rootAge() * (1:NUM_INTERVALS) / (NUM_INTERVALS) * 0.8


### rho is the probability of sampling species at the present
## fix this to 46/1923, since there are ~1923 described species of Scrophulariaceae in Olmstead's monography (28 September 2022)
### and we have sampled 46 tips in our tree.
rho <- T.ntips()/1923

Aptosymeae             = clade("IS713_Aptosimum_arenarium",  "EJBY_Anticharis_glandulosa", "IS714_Peliostomum_virgatum", missing= 36)
AndroLeucoMyo          = clade("IS1516_Androya_decaryi", "IS1540_Eremogeton_grandiflorus", "RMF247_Eremophila_alternifolia", missing=295)
Hemimerideae           = clade("IS1526_Colpias_mollis", "IS1535_Diclis_petiolaris", missing= 160)
Teedieae               = clade("IS888_Phygelius_aequalis", "IS1541_Freylinia_lanceolata", "IS883_Oftia_glabra", missing=11)
Buddlejeae             = clade("IS881_Buddleja_virgata", "IS902_Buddleja_polystachya", missing=29)
Camptolomeae           = clade("IS870b_Camptoloma_rotundifolium", "ISb872_Camptoloma_lyperiiflorum", missing=1)
Scrophularieae         = clade("IS1550_Manuleopsis_dinteri", "IS723_Scrophularia_arguta", "IS869b_Verbascum_virgatum", missing=756)
Limoselleae            = clade("IS708_Jamesbrittenia_heucherifolia", "IS879_Lyperia_antirrhinoides", "IS1524_Chaenostoma_patrioticum", "IS701_Manulea_pusila", "IS1538_Dischisma_clandestinum", "IS1555_Microdon_polygaloides", missing=619)

missing_species_per_clade = v(Aptosymeae, AndroLeucoMyo, Hemimerideae, Teedieae, Buddlejeae, Camptolomeae, Scrophularieae, Limoselleae)

timetree ~ dnEpisodicBirthDeath(rootAge=T.rootAge(), lambdaRates=speciation, lambdaTimes=interval_times, muRates=extinction, muTimes=interval_times, rho=1.0, taxa=taxa, incompleteClades=missing_species_per_clade, condition="time")

### clamp the model with the "observed" tree
timetree.clamp(T)



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(timetree)

### set up the monitors that will output parameter values to file and screen 
monitors[++mni] = mnModel(filename="output/Empirical/Scrophulariaceae_EBD_Empirical.log",printgen=10, separator = TAB)
monitors[++mni] = mnFile(filename="output/Empirical/Scrophulariaceae_EBD_Empirical_speciation_rates.log",printgen=10, separator = TAB, speciation)
monitors[++mni] = mnFile(filename="output/Empirical/Scrophulariaceae_EBD_Empirical_speciation_times.log",printgen=10, separator = TAB, interval_times)#
monitors[++mni] = mnFile(filename="output/Empirical/Scrophulariaceae_EBD_Empirical_extinction_rates.log",printgen=10, separator = TAB, extinction)
monitors[++mni] = mnFile(filename="output/Empirical/Scrophulariaceae_EBD_Empirical_extinction_times.log",printgen=10, separator = TAB, interval_times)
monitors[++mni] = mnScreen(printgen=1000, extinction_sd, speciation_sd)



################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals ###
mymcmc.burnin(generations=10000,tuningInterval=200)

### run the MCMC ###
mymcmc.run(generations=50000)



## quit ##
q()